// <auto-generated />
using System;
using Asil_Insaat.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Asil_Insaat.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240912201848_TeklifEkleme")]
    partial class TeklifEkleme
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb50035e-53df-4510-84a0-1b52a5695df5"),
                            ConcurrencyStamp = "c4b7ed78-ad6e-4875-99d6-e559e3e61900",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("258ca24d-5f16-44a0-afcc-8dea4d026528"),
                            ConcurrencyStamp = "c7d22a35-dfa9-4de2-afcc-406634c81152",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyisim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ResimId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("83314624-c7a0-4468-a6aa-1f2af06f4660"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b294bc7-1ebf-4ca6-b045-fcd396a2f403",
                            Email = "mertcanasil3@gmail.com",
                            EmailConfirmed = true,
                            Isim = "Mertcan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERTCANASIL3@GMAIL.COM",
                            NormalizedUserName = "MERTCANASIL3@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH27SgC67Xw7thDNv855nSU+QTBHySI5GYCCxL0eZlMS+gLy1ZK+33Te/FqnChIJlA==",
                            PhoneNumberConfirmed = false,
                            ResimId = new Guid("c70801ca-cc45-4079-83c6-b0da466bbabb"),
                            SecurityStamp = "2b7f7c9d-06d1-4687-a88c-b18c56f0d56a",
                            Soyisim = "Asıl",
                            TwoFactorEnabled = false,
                            UserName = "mertcanasil3@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("bef76420-d441-4820-a5c0-5b39d62a8e0b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e623535-31d7-4197-b4d0-aee68831233c",
                            Email = "asilinsaatyapiyalitim@gmail.com",
                            EmailConfirmed = false,
                            Isim = "Vahit",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASILINSAATYAPIYALITIM@GMAIL.COM",
                            NormalizedUserName = "ASILINSAATYAPIYALITIM@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF8zWtET4BPpIlmNNFp0zASotUoN7JlUBb/CXQP3grpwlHLafenOQ4REoC0b648vsQ==",
                            PhoneNumberConfirmed = false,
                            ResimId = new Guid("77e2d3f6-b7bf-4549-b7e2-7673d57586d6"),
                            SecurityStamp = "7746a7f9-d398-4813-938a-291856829c9a",
                            Soyisim = "Asil",
                            TwoFactorEnabled = false,
                            UserName = "asilinsaatyapiyalitim@gmail.com"
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("83314624-c7a0-4468-a6aa-1f2af06f4660"),
                            RoleId = new Guid("bb50035e-53df-4510-84a0-1b52a5695df5")
                        },
                        new
                        {
                            UserId = new Guid("bef76420-d441-4820-a5c0-5b39d62a8e0b"),
                            RoleId = new Guid("258ca24d-5f16-44a0-afcc-8dea4d026528")
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Fotograf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("İcerik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResimId");

                    b.HasIndex("UserId");

                    b.ToTable("Fotografs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a4f8575-fb28-4762-bb3e-bf3196b88edb"),
                            Baslik = "Images/testImages",
                            FileType = "jpg",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Mertcan asil",
                            ResimId = new Guid("c70801ca-cc45-4079-83c6-b0da466bbabb"),
                            SilinmisMi = false,
                            UserId = new Guid("83314624-c7a0-4468-a6aa-1f2af06f4660"),
                            İcerik = "Referans"
                        },
                        new
                        {
                            Id = new Guid("5ccc76f0-fb06-487f-9768-670c4e4a83f1"),
                            Baslik = "Images/AsiltestImages",
                            FileType = "jpg",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Vahit asil",
                            ResimId = new Guid("77e2d3f6-b7bf-4549-b7e2-7673d57586d6"),
                            SilinmisMi = false,
                            UserId = new Guid("bef76420-d441-4820-a5c0-5b39d62a8e0b"),
                            İcerik = "Referans1"
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Galeri", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("İcerik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResimId");

                    b.HasIndex("UserId");

                    b.ToTable("Galeris");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a4f8575-fb28-4762-bb3e-bf3196b88edb"),
                            Baslik = "Images/testImages",
                            FileType = "jpg",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Mertcan asil",
                            ResimId = new Guid("c70801ca-cc45-4079-83c6-b0da466bbabb"),
                            SilinmisMi = false,
                            UserId = new Guid("83314624-c7a0-4468-a6aa-1f2af06f4660"),
                            İcerik = "Referans"
                        },
                        new
                        {
                            Id = new Guid("5ccc76f0-fb06-487f-9768-670c4e4a83f1"),
                            Baslik = "Images/AsiltestImages",
                            FileType = "jpg",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Vahit asil",
                            ResimId = new Guid("77e2d3f6-b7bf-4549-b7e2-7673d57586d6"),
                            SilinmisMi = false,
                            UserId = new Guid("bef76420-d441-4820-a5c0-5b39d62a8e0b"),
                            İcerik = "Referans1"
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Kategori", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Kategoris");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f8cad02-c349-423e-b688-688cda3f65f8"),
                            Isim = "Birinci",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 23, 18, 47, 441, DateTimeKind.Local).AddTicks(8334),
                            Oluşturan = "Mertcan Asil",
                            SilinmisMi = false
                        },
                        new
                        {
                            Id = new Guid("b8a1c719-2d28-403b-b503-54497205ed6b"),
                            Isim = "Ikinci",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 23, 18, 47, 441, DateTimeKind.Local).AddTicks(8366),
                            Oluşturan = "Vahit Asil",
                            SilinmisMi = false
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Müsteri", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OdemeSarti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Olusturan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostaKodu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sehir")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Müsteris");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c60e2af-6121-4081-9464-e10de0dd1c9e"),
                            Adres = "ev",
                            Email = "mertcanasil3@gmail.com",
                            Isim = "mertcan",
                            OdemeSarti = "yarı peşin",
                            Olusturan = "mertcan",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Tanımsız",
                            PostaKodu = "23100",
                            Sehir = "elazığ",
                            SilinmisMi = false,
                            Telefon = "1111111"
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Ortak", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Baglanti")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResimId");

                    b.HasIndex("UserId");

                    b.ToTable("Ortaks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a4f8575-fb28-4762-bb3e-bf3196b88edb"),
                            Baglanti = "Referans",
                            Baslik = "Images/testImages",
                            FileType = "jpg",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Mertcan asil",
                            ResimId = new Guid("c70801ca-cc45-4079-83c6-b0da466bbabb"),
                            SilinmisMi = false,
                            UserId = new Guid("83314624-c7a0-4468-a6aa-1f2af06f4660")
                        },
                        new
                        {
                            Id = new Guid("5ccc76f0-fb06-487f-9768-670c4e4a83f1"),
                            Baglanti = "Referans1",
                            Baslik = "Images/AsiltestImages",
                            FileType = "jpg",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Vahit asil",
                            ResimId = new Guid("77e2d3f6-b7bf-4549-b7e2-7673d57586d6"),
                            SilinmisMi = false,
                            UserId = new Guid("bef76420-d441-4820-a5c0-5b39d62a8e0b")
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Resim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Resims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c70801ca-cc45-4079-83c6-b0da466bbabb"),
                            FileName = "Images/testImages",
                            FileType = "jpg",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Mertcan asil",
                            SilinmisMi = false
                        },
                        new
                        {
                            Id = new Guid("77e2d3f6-b7bf-4549-b7e2-7673d57586d6"),
                            FileName = "Images/AsiltestImages",
                            FileType = "png",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Vahit asil",
                            SilinmisMi = false
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.SatisBirimi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SatisBirimis");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f6c6d19-5561-44e4-9a5b-835bf595fac7"),
                            Aciklama = "deneme",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Tanımsız",
                            SilinmisMi = false
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Teklif", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Fiyat")
                        .HasColumnType("float");

                    b.Property<Guid>("MusteriId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MüsteriId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SonTarih")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TeklifTarih")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UrunId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ÜrünId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MüsteriId");

                    b.HasIndex("UserId");

                    b.HasIndex("ÜrünId");

                    b.ToTable("Teklifs");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Ürün", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Baslik")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Fiyat")
                        .HasColumnType("float");

                    b.Property<string>("Icerik")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Kdv")
                        .HasColumnType("float");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SatisBirimiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrunTuru")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SatisBirimiId");

                    b.HasIndex("UserId");

                    b.ToTable("Ürüns");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("İcerik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResimId");

                    b.HasIndex("UserId");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a4f8575-fb28-4762-bb3e-bf3196b88edb"),
                            Baslik = "Images/testImages",
                            FileType = "jpg",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Mertcan asil",
                            ResimId = new Guid("c70801ca-cc45-4079-83c6-b0da466bbabb"),
                            SilinmisMi = false,
                            UserId = new Guid("83314624-c7a0-4468-a6aa-1f2af06f4660"),
                            İcerik = "Referans"
                        },
                        new
                        {
                            Id = new Guid("5ccc76f0-fb06-487f-9768-670c4e4a83f1"),
                            Baslik = "Images/AsiltestImages",
                            FileType = "jpg",
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Vahit asil",
                            ResimId = new Guid("77e2d3f6-b7bf-4549-b7e2-7673d57586d6"),
                            SilinmisMi = false,
                            UserId = new Guid("bef76420-d441-4820-a5c0-5b39d62a8e0b"),
                            İcerik = "Referans1"
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Yazi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bilgi1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bilgi2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bilgi3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bilgi4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bilgi5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bilgiİcerik1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bilgiİcerik2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bilgiİcerik3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bilgiİcerik4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bilgiİcerik5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosya")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fiyat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icerik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("KategoriId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KategoriId");

                    b.HasIndex("ResimId");

                    b.HasIndex("UserId");

                    b.ToTable("Yazis");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62562c5a-e436-4ede-bbb3-fb507fbf8e4d"),
                            Baslik = "Mertcan",
                            Bilgi1 = "0",
                            Bilgi2 = "0",
                            Bilgi3 = "0",
                            Bilgi4 = "0",
                            Bilgi5 = "0",
                            Bilgiİcerik1 = "Bilgi",
                            Bilgiİcerik2 = "Bigi",
                            Bilgiİcerik3 = "Bilgi",
                            Bilgiİcerik4 = "Bilgi",
                            Bilgiİcerik5 = "Bilgi",
                            Dosya = "link",
                            Fiyat = "0",
                            Icerik = "Mertcan Deneme Makalesi Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            KategoriId = new Guid("9f8cad02-c349-423e-b688-688cda3f65f8"),
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 23, 18, 47, 450, DateTimeKind.Local).AddTicks(9319),
                            Oluşturan = "Mertcan Asil",
                            ResimId = new Guid("c70801ca-cc45-4079-83c6-b0da466bbabb"),
                            SilinmisMi = false,
                            UserId = new Guid("83314624-c7a0-4468-a6aa-1f2af06f4660")
                        },
                        new
                        {
                            Id = new Guid("1bf61331-7292-44cd-abad-ff42a068f4d5"),
                            Baslik = "Mertcan",
                            Bilgi1 = "0",
                            Bilgi2 = "0",
                            Bilgi3 = "0",
                            Bilgi4 = "0",
                            Bilgi5 = "0",
                            Bilgiİcerik1 = "Bilgi",
                            Bilgiİcerik2 = "Bigi",
                            Bilgiİcerik3 = "Bilgi",
                            Bilgiİcerik4 = "Bilgi",
                            Bilgiİcerik5 = "Bilgi",
                            Dosya = "link",
                            Fiyat = "0",
                            Icerik = "Mertcan Deneme Makalesi Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            KategoriId = new Guid("b8a1c719-2d28-403b-b503-54497205ed6b"),
                            OlusturulmaTarihi = new DateTime(2024, 9, 12, 23, 18, 47, 450, DateTimeKind.Local).AddTicks(9331),
                            Oluşturan = "Vahit asil",
                            ResimId = new Guid("77e2d3f6-b7bf-4549-b7e2-7673d57586d6"),
                            SilinmisMi = false,
                            UserId = new Guid("bef76420-d441-4820-a5c0-5b39d62a8e0b")
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUser", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.Resim", "Resim")
                        .WithMany("Users")
                        .HasForeignKey("ResimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resim");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserClaim", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserLogin", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserRole", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserToken", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Fotograf", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.Resim", "Resim")
                        .WithMany("Fotografs")
                        .HasForeignKey("ResimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Galeri", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.Resim", "Resim")
                        .WithMany("Galeris")
                        .HasForeignKey("ResimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Ortak", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.Resim", "Resim")
                        .WithMany("Ortaks")
                        .HasForeignKey("ResimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Teklif", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.Müsteri", "Müsteri")
                        .WithMany("Teklifs")
                        .HasForeignKey("MüsteriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", "User")
                        .WithMany("Teklifs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.Ürün", "Ürün")
                        .WithMany("Teklifs")
                        .HasForeignKey("ÜrünId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Müsteri");

                    b.Navigation("User");

                    b.Navigation("Ürün");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Ürün", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.SatisBirimi", "SatisBirimi")
                        .WithMany("Ürüns")
                        .HasForeignKey("SatisBirimiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SatisBirimi");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Video", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.Resim", "Resim")
                        .WithMany("Videos")
                        .HasForeignKey("ResimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Yazi", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.Kategori", "Kategori")
                        .WithMany("Yazis")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.Resim", "Resim")
                        .WithMany("Yazis")
                        .HasForeignKey("ResimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", "User")
                        .WithMany("Yazis")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");

                    b.Navigation("Resim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUser", b =>
                {
                    b.Navigation("Teklifs");

                    b.Navigation("Yazis");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Kategori", b =>
                {
                    b.Navigation("Yazis");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Müsteri", b =>
                {
                    b.Navigation("Teklifs");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Resim", b =>
                {
                    b.Navigation("Fotografs");

                    b.Navigation("Galeris");

                    b.Navigation("Ortaks");

                    b.Navigation("Users");

                    b.Navigation("Videos");

                    b.Navigation("Yazis");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.SatisBirimi", b =>
                {
                    b.Navigation("Ürüns");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Ürün", b =>
                {
                    b.Navigation("Teklifs");
                });
#pragma warning restore 612, 618
        }
    }
}
